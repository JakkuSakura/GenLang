parentheses : '(' math_expr ')'

args : math_expr ,
args :

tuple : '(' args ')'

tuples : tuple

call : IDENTIFIER subscripts tuples
call : parentheses subscripts tuples

list : '[' args ']'

subscript : '[' math_expr ']'
subscripts : subscript +

raw_array : TYPENAME subscripts


obj_pair : IDENTIFIER : math_expr
obj_pairs : obj_pair ( , obj_pair ) *

map_obj : { obj_pairs }

atom & : call
atom & : fetch
atom & : new_obj
atom & : list
atom & : map_obj
atom & : parentheses
atom & : CONSTANT
atom & : IDENTIFIER
atom & : STRING

power & : [ atom ( atom '**' power ) ]
multi & : power ( [ '*' '/' '%' ] power # ) *

add_rule & : multi ( [ '+' '-' ] multi # ) *

compare & : add_rule ( [ '==' '=' '==' '==' '<' '>' '<=' '>=' ] add_rule # ) *

assign & : [ compare ( compare = assign ) ]


assigns : assign (, assign ) *

math_expr & : assign

expr & : math_expr

if_stmt : if '(' math_expr ')' # stmt ( else stmt ) ?
while_stmt : while '(' math_expr # ')' # stmt



raw_assign = IDENTIFIER ( = math_expr ) ?

let_args_assign :  raw_assign ( , raw_assign ) *

let_stmt : let let_args_assign ; #

let_args :  IDENTIFIER ( , IDENTIFIER ) *

let_stmt : let let_args as TYPENAME ; #
let_stmt : let let_args as raw_array ; #


stmt & : ;
stmt & : if_stmt
stmt & : while_stmt
stmt & : stmtblk
stmt & : let_stmt
stmt 'stmt' : expr ; #

pair : TYPENAME IDENTIFIER

func_decl : pair '(' decl_args ')'
func_def : func_decl stmtblk

decl_args : pair ( , pair ) *
decl_args : EMPTY



class_def : class_decl stmtblk
class_decl : class IDENTIFIER

stmt : class_def
stmt : class_decl ;


stmt : func_decl ;
stmt : func_def
native_blk : NATIVE
stmt : native_blk

stmtblk : { stmts }

stmts : stmt *

root 'root' : stmts &

# untested something